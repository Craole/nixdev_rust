NixDev - Rust

Create a modular nix flake to establish a rust development environment.

Features:
- Allow user to set/enable optional features
- Use flake-utils to maintain portability
- Take a modular approach to reduce the code length. (eg. write logic,derivations and options in seperate files)
- Deploy using one command to run nix flake init and nix develop
- Store options and information in separate config file (eg. IDE, project info, crates and features, targets, toolchain)
- Initialize rust project in a subfolder with the project name
- Integrate with cargo.toml

Optional Features:
- Set up an IDE with editing and formatting tools for rust, nix and json files. (eg. vscode, helix, neovim, emacs)
- Allow user to set project information for the cargo.toml (eg. name, version, authors)
- Allow user to set dependencies with optional features flags in cargo.toml (eg. cargo add serde --feature derive)
- Allow user to set targets. (eg. wasm)
- Allow user to set toolchain (eg. nightly, beta)

Project Structure:
.
├── config
│ ├── overlays
│ │ └── rust-dev-env.nix
│ ├── options
│ │ ├── dependencies.nix
│ │ ├── ide.nix
│ │ ├── gitignore.nix
│ │ ├── project.nix
│ │ ├── targets.nix
│ │ └── toolchain.nix
│ ├── derivations
│ │ ├── cargo.nix
│ │ ├── nixfmt.nix
│ │ ├── rust.nix
│ │ ├── rustfmt.nix
│ │ ├── rls.nix
│ │ ├── rust-analyzer.nix
│ │ └── <other modular derivations>
├── src
│ └── modules
│ │ ├── mod1
│ │ │ ├── mod.rs
│ │ ├── <other mods>
│ │ └── mod.rs
│ └── libraries
│ │ ├── lib1
│ │ │ ├── mod.rs
│ │ ├── <other mods>
│ │ └── mod.rs
├── flake.nix
├── cargo.toml
├── README.md
